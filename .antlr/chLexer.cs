//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/thaut/Desktop/testp/ch.tbnf by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class chLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, LETTER=2, NAME=3, FLOAT_NUMBER=4, INT_NUMBER=5, STRING=6, COMMENT=7, 
		WS=8, NEWLINE=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "DIGIT", "LETTER", "NAME", "FLOAT_NUMBER", "INT_NUMBER", "STRING", 
		"COMMENT", "WS", "NEWLINE"
	};


	public chLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public chLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "LETTER", "NAME", "FLOAT_NUMBER", "INT_NUMBER", "STRING", 
		"COMMENT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ch.tbnf"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static chLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', 'n', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x6', '\x2', '\x19', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x1A', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '$', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '%', '\x3', '\x6', '\x5', '\x6', ')', '\n', 
		'\x6', '\x3', '\x6', '\x6', '\x6', ',', '\n', '\x6', '\r', '\x6', '\xE', 
		'\x6', '-', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x32', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x5', '\x6', '\x37', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', ';', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '<', '\x5', '\x6', '?', '\n', '\x6', '\x3', 
		'\a', '\x5', '\a', '\x42', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'J', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'M', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'S', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'V', '\v', '\t', '\x3', '\t', '\x5', '\t', 'Y', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x6', '\n', '`', 
		'\n', '\n', '\r', '\n', '\xE', '\n', '\x61', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x5', '\v', 'g', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x6', 
		'\v', 'k', '\n', '\v', '\r', '\v', '\xE', '\v', 'l', '\x2', '\x2', '\f', 
		'\x3', '\x3', '\x5', '\x2', '\a', '\x4', '\t', '\x5', '\v', '\x6', '\r', 
		'\a', '\xF', '\b', '\x11', '\t', '\x13', '\n', '\x15', '\v', '\x3', '\x2', 
		'\n', '\x3', '\x2', '\x32', ';', '\x6', '\x2', '\x43', '\\', '\x61', '\x61', 
		'\x63', '|', '\x82', '\x101', '\x4', '\x2', '-', '-', '/', '/', '\x3', 
		'\x2', '\x30', '\x30', '\n', '\x2', '$', '$', ')', ')', '^', '^', '\x64', 
		'\x64', 'h', 'h', 'p', 'p', 't', 't', 'v', 'v', '\x6', '\x2', '\f', '\f', 
		'\xF', '\xF', '$', '$', '^', '^', '\x4', '\x2', '\f', '\f', '\xF', '\xF', 
		'\x4', '\x2', '\"', '\"', 'v', 'v', '\x2', '~', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x3', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x1E', '\x3', '\x2', '\x2', '\x2', '\t', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\v', '(', '\x3', '\x2', '\x2', '\x2', '\r', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x45', '\x3', '\x2', '\x2', '\x2', '\x11', 'P', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '_', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x5', '\x3', 
		'\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\t', '\x2', '\x2', '\x2', '\x1D', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\t', '\x3', '\x2', '\x2', '\x1F', 
		'\b', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', '\a', '\x4', '\x2', 
		'!', '$', '\x5', '\a', '\x4', '\x2', '\"', '$', '\x5', '\x5', '\x3', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\'', ')', '\t', '\x4', '\x2', '\x2', '(', '\'', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '>', '\x3', 
		'\x2', '\x2', '\x2', '*', ',', '\t', '\x2', '\x2', '\x2', '+', '*', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x33', '\t', '\x5', '\x2', '\x2', '\x30', 
		'\x32', '\t', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '/', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '?', '\x3', '\x2', '\x2', '\x2', '\x38', 
		':', '\t', '\x5', '\x2', '\x2', '\x39', ';', '\t', '\x2', '\x2', '\x2', 
		':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '+', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x38', '\x3', '\x2', '\x2', '\x2', '?', '\f', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x42', '\t', '\x4', '\x2', '\x2', '\x41', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\x3', '\x2', 
		'\x2', '\x44', '\xE', '\x3', '\x2', '\x2', '\x2', '\x45', 'K', '\a', '$', 
		'\x2', '\x2', '\x46', 'G', '\a', '^', '\x2', '\x2', 'G', 'J', '\t', '\x6', 
		'\x2', '\x2', 'H', 'J', '\n', '\a', '\x2', '\x2', 'I', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '$', '\x2', '\x2', 'O', '\x10', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'T', '\a', '%', '\x2', '\x2', 'Q', 'S', '\n', 
		'\b', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'Y', '\a', '\xF', '\x2', '\x2', 'X', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\a', '\f', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\b', '\t', '\x2', '\x2', ']', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '^', '`', '\t', '\t', '\x2', '\x2', '_', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\b', 
		'\n', '\x2', '\x2', '\x64', '\x14', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'g', '\a', 't', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'k', '\a', 'p', '\x2', '\x2', 'i', 'k', '\a', 't', '\x2', 
		'\x2', 'j', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x2', '\x1A', '#', '%', '(', '-', '\x33', 
		'\x36', '<', '>', '\x41', 'I', 'K', 'T', 'X', '\x61', '\x66', 'j', 'l', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
